"use strict";
const k8s = require("@pulumi/kubernetes");

// --- Pulumi Resource Management ---

// const appLabels = { app: "node-mock-api" };

// const configMap = new k8s.core.v1.ConfigMap("env", {
//   // in order to prevent auto-generated "names" from being generated by Pulumi, I must create 
//   // the metadata object and define it there
//   metadata: {
//       name: "dev-env"
//   },
//   data: { PORT: "9000" },
// });

// const deployment = new k8s.apps.v1.Deployment("api", {
//   spec: {
//     selector: { matchLabels: appLabels },
//     replicas: 1,
//     template: {
//       metadata: { labels: appLabels },
//       spec: {
//         containers: [
//           {
//             name: "api",
//             image: "public.ecr.aws/q0g3t5w3/node-mock-api:latest",
//             envFrom: [{ configMapRef: { name: configMap.metadata.name } }],
//           },
//         ],
//         ports: [
//           {
//             containerPort: 9000,
//           },
//         ],
//       },
//     },
//   },
// });

// const externalLoadbalancer = new k8s.core.v1.Service("loadbalancer", {
//   metadata: {
//     name: "external-loadbalancer",
//     annotations: [
//       {
//         "service.beta.kubernetes.io/aws-load-balancer-backend-protocol": "http",
//       },
//     ],
//   },
//   spec: {
//     type: "LoadBalancer",
//     ports: [{ port: 80, targetPort: 9000, protocol: "TCP" }],
//     selector: appLabels,
//   },
// });

// exports.name = deployment.metadata.name;

// --- Pulumi Resource Management via Helm ---

const chart = new k8s.helm.v3.Chart("node-mock-api", {
  path: "../helm"
})
